@layout('master')
@section('content')
<section class="cart-main-area section-padding--lg mt-5 bg--white">
    <div class="container" id="cart">
        <div class="row">
            <div class="col-md-12 col-sm-12 ol-lg-12">
                <h3 class="account__title">My Cart</h3>
                    <div class="table-content wnro__table table-responsive">
                        <table>
                            <thead>
                                <tr class="title-top">
                                    {{--  <th width="5px"><input type="checkbox" id="check_all"></th>  --}}
                                  <th class="product-thumbnail">Image</th>
                                  <th class="product-name">Product</th>
                                  <th class="product-price">Price</th>
                                  <th class="product-quantity">Quantity</th>
                                  <th class="product-subtotal">Total</th>
                                  <th class="product-remove">Remove</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if(!cart.length)
                                    <tr>
                                        <td class="product-name" colspan="6"><strong>Cart is empty</strong></td>
                                    </tr>
                                @endif
                                <form id="cart-form" action="{{ route('user.checkout') }}" method="POST">
                                    {{ csrfField() }}
                                    <input type="hidden" id="order_no" value="{{ order_number }}">
                                    <tr v-for="item in myCart">
                                        {{--  <td align="center"><input type="checkbox" class="checkbox" data-id="item.id"></td>  --}}
                                        <td class="product-thumbnail">
                                                <template v-if="item.book.image">
                                                    <img :src="'/uploads/' + item.book.image" :alt="item.book.book_name">
                                                </template>
                                                <template v-else>
                                                    <img src="/shopper/images/product/sm-3/1.jpg" alt="product img">
                                                </template>
                                        </td>
                                        <td class="product-name">
                                            <input type="hidden" id="book_id[]" v-model="item.id">
                                        <a href="view/book" onclick="event.preventDefault();" v-on:click="viewBook(item.book.id)">@{{ item.book.book_name }}</a>
                                        </td>
                                        <td class="product-price">
                                            <span class="amount">@{{ item.book.price - (item.book.price * (item.book.discount/100)) }}</span>
                                            <input type="hidden" id="price[]" v-text="">
                                        </td>
                                        <td class="product-quantity">
                                            <input id="quantity[]" type="number" min="1" v-model="item.quantity" v-on:change="checkQuantity(item.id, item.book_id, item.quantity)">
                                        </td>
                                        <td class="product-subtotal">@{{ item.quantity * (item.book.price - (item.book.price * (item.book.discount/100))) }}</td>
                                        <td class="product-remove"><a href="cart/remove" onclick="event.preventDefault();" v-on:click="removeItem(item.id)">X</a></td>
                                    </tr>
                                </form>
                            </tbody>
                        </table>
                    </div>
                <div class="cartbox__btn">
                    <ul class="cart__btn__list d-flex flex-wrap flex-md-nowrap flex-lg-nowrap">
                        {{--  <button id="delete-all" type="button" class="btn btn-danger"style="width: 125px;"><i class="fa fa-trash"></i> Delete</button>  --}}
                        <li>
                            <a href="checkout" class="btn btn-info" onclick="event.preventDefault();"
                            v-on:click="submitCart()">Check Out</a>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6 offset-lg-6">
                <div class="cartbox__total__area">
                    <div class="cart__total__amount">
                        <span>Grand Total</span>
                        <span>Php @{{ cartTotal }}</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>
@endsection
@section('extra_scripts')
<script type="text/javascript">
    new Vue({
        el: '#cart',
            data () {
                return {
                    myCart: [],
                }
            },
            mounted () {
                this.getCart()
            },
            computed: {
                cartTotal() {
                    let total = [];
                    Object.entries(this.myCart).forEach(([key, item]) => {
                        total.push(item.quantity * (item.book.price - (item.book.price * (item.book.discount/100)))) // the value of the current key.
                    });
                    return total.reduce(function(total, num){ return total + num }, 0);
                }
            },
            methods: {
                getCart() {
                    var app = this
                    axios.get('/account/cart/items')
                    .then(function (response) {
                        app.myCart = response.data
                    })
                    .catch(function (error) {
                        console.log(error);
                    });
                },
                removeItem(item) {
                    Swal.fire({
                    title: 'Are you sure?',
                    text: "You won't be able to revert this!",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, delete it!'
                    })
                    .then((result) => {
                        if (result.value) {
                            var app = this

                            for( var i = 0; i < app.myCart.length; i++){
                                if ( app.myCart[i].id === item) {
                                    app.myCart.splice(i, 1);
                                    i--;
                                }
                            }

                            axios.delete('cart/'+ item)
                            .then(function(response){
                                if (response.data.status == 'success') {
                                    Swal.fire(
                                        response.data.message,
                                        'Successfully delete.',
                                        response.data.status,
                                    ).then(function(){
                                        document.getElementById("cartItemCount").innerText = app.myCart.length
                                    })
                                }
                                else if(response.data.status == 'error') {
                                    Swal.fire(
                                        response.data.message,
                                        'Failed to delete book.',
                                        response.data.status,
                                    )
                                }
                            })
                            .catch(function (response) {
                                Swal.fire(
                                    response.message,
                                    'Failed to delete book.',
                                    response.message,
                                )
                            })
                        }
                    })

                },
                submitCart() {
                    var app = this
                    var order_no = document.getElementById('order_no').value
                    if (!app.myCart.length)
                        return
                    else
                    for( var i = 0; i < app.myCart.length; i++){
                        axios.post('order/store', {
                                order_no: order_no,
                                book_id: app.myCart[i].book_id,
                                user_id: {{ auth.user.id }},
                                price: app.myCart[i].quantity * (app.myCart[i].book.price - (app.myCart[i].book.price * (app.myCart[i].book.discount/100))),
                                quantity: app.myCart[i].quantity,
                                cart_id: app.myCart[i].id,
                            })
                            .then(function (response) {
                                console.log(response.data.message)

                            })
                            .catch(function(errror){
                                console.log('error: ', errror);
                        });
                    }

                    Swal.fire(
                        'Successfuly ordered',
                        'Book(s) has been ordered.',
                        'success',
                        ).then(function(){
                            window.location = '/account/orders/'+order_no
                    })

                },
                checkQuantity(cartId, bookId, quantity) {
                  axios.post('/check-available-quantity',{
                      cart_id:cartId,
                      book_id:bookId,
                      quantity:quantity
                  })
                  .then(function (response) {
                    if (response.data.status == 'error')
                    {
                      Swal.fire(
                          response.data.message,
                          'Insufficient stock',
                          response.data.status,
                      ).then(function(){
                        window.location.reload()
                      })
                    } else {
                      axios.put('cart/' + cartId, {
                                quantity: quantity
                            })
                    }
                  })
                },
                viewBook(bookId) {
                    window.location = '/view/book/'+bookId
                }
            }
    })
</script>

<script type="text/javascript">

  $(document).ready(function () {
      $('#check_all').on('click', function(e) {
          console.log('checking')
          if($(this).is(':checked',true))
          {
              $(".checkbox").prop('checked', true);
          } else {
              $(".checkbox").prop('checked',false);
          }
      });

      $('.checkbox').on('click',function(){
          if($('.checkbox:checked').length == $('.checkbox').length){
              $('#check_all').prop('checked',true);
          } else {
              $('#check_all').prop('checked',false);
          }
      });

      $('#delete-all').on('click', function(e) {
          console.log('deleting...')
          var idsArr = [];
          $(".checkbox:checked").each(function() {
              idsArr.push($(this).attr('data-id'));
          });

          if(idsArr.length <=0)
          {
              Swal.fire(
                  'Please select atleast one record to delete.',
                  'Failed to delete activity.',
                  'error',
              )
          }  else {
              Swal.fire({
                  title: 'Are you sure?',
                  text: "You won't be able to revert this!",
                  type: 'warning',
                  showCancelButton: true,
                  confirmButtonColor: '#3085d6',
                  cancelButtonColor: '#d33',
                  confirmButtonText: 'Yes, delete it!'
              }).then((result) => {
                  if (result.value) {
                      var strIds = idsArr.join(",");
                      console.log(strIds)
                      axios.delete('{{ route('cart.deleteMultiple') }}',{
                          params: {
                              ids:strIds
                          }
                      }).then(function(response){
                          console.log(response)
                          $(".checkbox:checked").each(function() {
                                      $(this).parents("tr").remove();
                                  });
                          Swal.fire(
                              response.data.message,
                              'Successfully deleted.',
                              response.data.status,
                          );
                      })
                  }
              })
          }
      });
  });

</script>
@endsection
